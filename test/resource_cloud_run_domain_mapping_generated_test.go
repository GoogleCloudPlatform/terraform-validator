// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package test

import (
	"io/ioutil"
	"log"
	"os"
	"path"
	"testing"
)

func TestAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample_generated_offline(t *testing.T) {
	testSlug := "CloudRunDomainMapping_cloudRunDomainMappingBasicExample_offline"
	offline := true
	testAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample_shared(t, testSlug, offline)
}

func TestAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample_generated_online(t *testing.T) {
	testSlug := "CloudRunDomainMapping_cloudRunDomainMappingBasicExample_online"
	offline := false
	testAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample_shared(t, testSlug, offline)
}

func testAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample_shared(t *testing.T, testSlug string, offline bool) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
		return
	}

	t.Parallel()
	context := map[string]interface{}{
		"namespace":     getTestProjectFromEnv(),
		"random_suffix": "meepmerp", // true randomization isn't needed for validator
	}

	terraformConfig := getTestPrefix() + testAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample(context)
	dir, err := ioutil.TempDir(tmpDir, "terraform")
	if err != nil {
		log.Fatal(err)
	}
	defer os.RemoveAll(dir)

	dstFile := path.Join(dir, "main.tf")
	err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
	if err != nil {
		t.Fatalf("error while writing to file %s, error %v", dstFile, err)
	}

	terraformWorkflow(t, dir, testSlug)
	if offline && shouldOutputGeneratedFiles() {
		generateTFVconvertedAsset(t, dir, testSlug)
		return
	}

	// need to have comparison.. perhaps test vs checked in code
	// testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

	testValidateCommandGeneric(t, dir, testSlug, offline)
}

func testAccCloudRunDomainMapping_cloudRunDomainMappingBasicExample(context map[string]interface{}) string {
	return Nprintf(`

resource "google_cloud_run_service" "default" {
  name     = "tf-test-cloudrun-srv%{random_suffix}"
  location = "us-central1"

  metadata {
    namespace = "%{namespace}"
  }

  template {
    spec {
      containers {
        image = "us-docker.pkg.dev/cloudrun/container/hello"
      }
    }
  }
}

resource "google_cloud_run_domain_mapping" "default" {
  location = "us-central1"
  name     = "tf-test-domain%{random_suffix}.gcp.tfacc.hashicorptest.com"

  metadata {
    namespace = "%{namespace}"
  }

  spec {
    route_name = google_cloud_run_service.default.name
  }
}
`, context)
}
