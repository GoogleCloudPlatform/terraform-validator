// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/bigtable/admin/v2/common.proto

package admin

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Storage media types for persisting Bigtable data.
type StorageType int32

const (
	// The user did not specify a storage type.
	StorageType_STORAGE_TYPE_UNSPECIFIED StorageType = 0
	// Flash (SSD) storage should be used.
	StorageType_SSD StorageType = 1
	// Magnetic drive (HDD) storage should be used.
	StorageType_HDD StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "STORAGE_TYPE_UNSPECIFIED",
	1: "SSD",
	2: "HDD",
}

var StorageType_value = map[string]int32{
	"STORAGE_TYPE_UNSPECIFIED": 0,
	"SSD":                      1,
	"HDD":                      2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}

func (StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79ab584e3c858108, []int{0}
}

// Encapsulates progress related information for a Cloud Bigtable long
// running operation.
type OperationProgress struct {
	// Percent completion of the operation.
	// Values are between 0 and 100 inclusive.
	ProgressPercent int32 `protobuf:"varint,1,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// Time the request was received.
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// If set, the time at which this operation failed or was completed
	// successfully.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OperationProgress) Reset()         { *m = OperationProgress{} }
func (m *OperationProgress) String() string { return proto.CompactTextString(m) }
func (*OperationProgress) ProtoMessage()    {}
func (*OperationProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_79ab584e3c858108, []int{0}
}

func (m *OperationProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationProgress.Unmarshal(m, b)
}
func (m *OperationProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationProgress.Marshal(b, m, deterministic)
}
func (m *OperationProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationProgress.Merge(m, src)
}
func (m *OperationProgress) XXX_Size() int {
	return xxx_messageInfo_OperationProgress.Size(m)
}
func (m *OperationProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationProgress.DiscardUnknown(m)
}

var xxx_messageInfo_OperationProgress proto.InternalMessageInfo

func (m *OperationProgress) GetProgressPercent() int32 {
	if m != nil {
		return m.ProgressPercent
	}
	return 0
}

func (m *OperationProgress) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *OperationProgress) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.bigtable.admin.v2.StorageType", StorageType_name, StorageType_value)
	proto.RegisterType((*OperationProgress)(nil), "google.bigtable.admin.v2.OperationProgress")
}

func init() {
	proto.RegisterFile("google/bigtable/admin/v2/common.proto", fileDescriptor_79ab584e3c858108)
}

var fileDescriptor_79ab584e3c858108 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xff, 0xdd, 0xf8, 0x3b, 0xcd, 0x0e, 0xd6, 0x9e, 0xca, 0x18, 0x3a, 0x04, 0x61, 0x7a,
	0x48, 0xa0, 0xe2, 0x41, 0x64, 0x87, 0x6d, 0xad, 0x73, 0x17, 0x57, 0xd6, 0x3a, 0x50, 0x0a, 0x25,
	0x5d, 0x63, 0x28, 0xb4, 0x49, 0x48, 0xb3, 0x81, 0x5f, 0xc9, 0x83, 0xf8, 0x39, 0xfc, 0x54, 0xd2,
	0xb4, 0x3d, 0x89, 0x78, 0x7b, 0xdf, 0xbc, 0xbf, 0xe7, 0x7d, 0x1e, 0xde, 0x80, 0x0b, 0xca, 0x39,
	0xcd, 0x09, 0x4a, 0x32, 0xaa, 0x70, 0x92, 0x13, 0x84, 0xd3, 0x22, 0x63, 0x68, 0xef, 0xa0, 0x2d,
	0x2f, 0x0a, 0xce, 0xa0, 0x90, 0x5c, 0x71, 0xcb, 0xae, 0x31, 0xd8, 0x62, 0x50, 0x63, 0x70, 0xef,
	0x0c, 0x86, 0xcd, 0x02, 0x2c, 0x32, 0x84, 0x19, 0xe3, 0x0a, 0xab, 0x8c, 0xb3, 0xb2, 0xd6, 0x0d,
	0xce, 0x9a, 0xa9, 0xee, 0x92, 0xdd, 0x2b, 0x52, 0x59, 0x41, 0x4a, 0x85, 0x0b, 0x51, 0x03, 0xe7,
	0x9f, 0x06, 0x38, 0x59, 0x09, 0x22, 0xb5, 0xca, 0x97, 0x9c, 0x4a, 0x52, 0x96, 0xd6, 0x25, 0x30,
	0x45, 0x53, 0xc7, 0x82, 0xc8, 0x2d, 0x61, 0xca, 0x36, 0x46, 0xc6, 0xf8, 0xff, 0xfa, 0xb8, 0x7d,
	0xf7, 0xeb, 0x67, 0xeb, 0x16, 0x80, 0x52, 0x61, 0xa9, 0xe2, 0x6a, 0xb3, 0xdd, 0x19, 0x19, 0xe3,
	0xbe, 0x33, 0x80, 0x4d, 0xdc, 0xd6, 0x16, 0x86, 0xad, 0xed, 0xfa, 0x48, 0xd3, 0x55, 0x6f, 0xdd,
	0x80, 0x43, 0xc2, 0xd2, 0x5a, 0xd8, 0xfd, 0x53, 0xd8, 0x23, 0x2c, 0xad, 0xba, 0xab, 0x09, 0xe8,
	0x07, 0x8a, 0x4b, 0x4c, 0x49, 0xf8, 0x26, 0x88, 0x35, 0x04, 0x76, 0x10, 0xae, 0xd6, 0xd3, 0x85,
	0x17, 0x87, 0xcf, 0xbe, 0x17, 0x3f, 0x3d, 0x06, 0xbe, 0x37, 0x5f, 0xde, 0x2f, 0x3d, 0xd7, 0xfc,
	0x67, 0xf5, 0x40, 0x37, 0x08, 0x5c, 0xd3, 0xa8, 0x8a, 0x07, 0xd7, 0x35, 0x3b, 0xb3, 0x0f, 0x03,
	0x0c, 0xb7, 0xbc, 0x80, 0xbf, 0x5d, 0x74, 0xd6, 0x9f, 0xeb, 0xcb, 0xfb, 0x55, 0x04, 0xdf, 0x78,
	0x99, 0x34, 0x20, 0xe5, 0x39, 0x66, 0x14, 0x72, 0x49, 0x11, 0x25, 0x4c, 0x07, 0x44, 0xf5, 0x08,
	0x8b, 0xac, 0xfc, 0xf9, 0x81, 0x77, 0xba, 0x78, 0xef, 0x9c, 0x2e, 0x6a, 0xfd, 0x3c, 0xe7, 0xbb,
	0x14, 0xce, 0x5a, 0xbb, 0xa9, 0xb6, 0xdb, 0x38, 0x5f, 0x2d, 0x10, 0x69, 0x20, 0x6a, 0x81, 0x48,
	0x03, 0xd1, 0xc6, 0x49, 0x0e, 0xb4, 0xd7, 0xf5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x18,
	0x8b, 0xec, 0x2b, 0x02, 0x00, 0x00,
}
