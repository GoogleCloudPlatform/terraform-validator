// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "fmt"

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const BigqueryConnectionConnectionIAMAssetType string = "bigqueryconnection.googleapis.com/Connection"

func resourceConverterBigqueryConnectionConnectionIamPolicy() ResourceConverter {
	return ResourceConverter{
		AssetType:         BigqueryConnectionConnectionIAMAssetType,
		Convert:           GetBigqueryConnectionConnectionIamPolicyCaiObject,
		MergeCreateUpdate: MergeBigqueryConnectionConnectionIamPolicy,
	}
}

func resourceConverterBigqueryConnectionConnectionIamBinding() ResourceConverter {
	return ResourceConverter{
		AssetType:         BigqueryConnectionConnectionIAMAssetType,
		Convert:           GetBigqueryConnectionConnectionIamBindingCaiObject,
		FetchFullResource: FetchBigqueryConnectionConnectionIamPolicy,
		MergeCreateUpdate: MergeBigqueryConnectionConnectionIamBinding,
		MergeDelete:       MergeBigqueryConnectionConnectionIamBindingDelete,
	}
}

func resourceConverterBigqueryConnectionConnectionIamMember() ResourceConverter {
	return ResourceConverter{
		AssetType:         BigqueryConnectionConnectionIAMAssetType,
		Convert:           GetBigqueryConnectionConnectionIamMemberCaiObject,
		FetchFullResource: FetchBigqueryConnectionConnectionIamPolicy,
		MergeCreateUpdate: MergeBigqueryConnectionConnectionIamMember,
		MergeDelete:       MergeBigqueryConnectionConnectionIamMemberDelete,
	}
}

func GetBigqueryConnectionConnectionIamPolicyCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBigqueryConnectionConnectionIamAsset(d, config, expandIamPolicyBindings)
}

func GetBigqueryConnectionConnectionIamBindingCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBigqueryConnectionConnectionIamAsset(d, config, expandIamRoleBindings)
}

func GetBigqueryConnectionConnectionIamMemberCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBigqueryConnectionConnectionIamAsset(d, config, expandIamMemberBindings)
}

func MergeBigqueryConnectionConnectionIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeBigqueryConnectionConnectionIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeBigqueryConnectionConnectionIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeBigqueryConnectionConnectionIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeBigqueryConnectionConnectionIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newBigqueryConnectionConnectionIamAsset(
	d TerraformResourceData,
	config *Config,
	expandBindings func(d TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//bigqueryconnection.googleapis.com/projects/{{project}}/locations/{{location}}/connections/{{connection_id}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: BigqueryConnectionConnectionIAMAssetType,
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchBigqueryConnectionConnectionIamPolicy(d TerraformResourceData, config *Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("location"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("connection_id"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		BigqueryConnectionConnectionIamUpdaterProducer,
		d,
		config,
		"//bigqueryconnection.googleapis.com/projects/{{project}}/locations/{{location}}/connections/{{connection_id}}",
		BigqueryConnectionConnectionIAMAssetType,
	)
}
