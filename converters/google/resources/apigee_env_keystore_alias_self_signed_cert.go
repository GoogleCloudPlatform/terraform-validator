// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const ApigeeEnvKeystoreAliasSelfSignedCertAssetType string = "apigee.googleapis.com/EnvKeystoreAliasSelfSignedCert"

func resourceConverterApigeeEnvKeystoreAliasSelfSignedCert() ResourceConverter {
	return ResourceConverter{
		AssetType: ApigeeEnvKeystoreAliasSelfSignedCertAssetType,
		Convert:   GetApigeeEnvKeystoreAliasSelfSignedCertCaiObject,
	}
}

func GetApigeeEnvKeystoreAliasSelfSignedCertCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//apigee.googleapis.com/organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetApigeeEnvKeystoreAliasSelfSignedCertApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: ApigeeEnvKeystoreAliasSelfSignedCertAssetType,
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/apigee/v1/rest",
				DiscoveryName:        "EnvKeystoreAliasSelfSignedCert",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetApigeeEnvKeystoreAliasSelfSignedCertApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	aliasProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertAlias(d.Get("alias"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("alias"); !isEmptyValue(reflect.ValueOf(aliasProp)) && (ok || !reflect.DeepEqual(v, aliasProp)) {
		obj["alias"] = aliasProp
	}
	subjectAlternativeDnsNamesProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectAlternativeDnsNames(d.Get("subject_alternative_dns_names"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subject_alternative_dns_names"); !isEmptyValue(reflect.ValueOf(subjectAlternativeDnsNamesProp)) && (ok || !reflect.DeepEqual(v, subjectAlternativeDnsNamesProp)) {
		obj["subjectAlternativeDnsNames"] = subjectAlternativeDnsNamesProp
	}
	keySizeProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertKeySize(d.Get("key_size"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("key_size"); !isEmptyValue(reflect.ValueOf(keySizeProp)) && (ok || !reflect.DeepEqual(v, keySizeProp)) {
		obj["keySize"] = keySizeProp
	}
	sigAlgProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertSigAlg(d.Get("sig_alg"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("sig_alg"); !isEmptyValue(reflect.ValueOf(sigAlgProp)) && (ok || !reflect.DeepEqual(v, sigAlgProp)) {
		obj["sigAlg"] = sigAlgProp
	}
	subjectProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubject(d.Get("subject"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subject"); !isEmptyValue(reflect.ValueOf(subjectProp)) && (ok || !reflect.DeepEqual(v, subjectProp)) {
		obj["subject"] = subjectProp
	}
	certValidityInDaysProp, err := expandApigeeEnvKeystoreAliasSelfSignedCertCertValidityInDays(d.Get("cert_validity_in_days"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cert_validity_in_days"); !isEmptyValue(reflect.ValueOf(certValidityInDaysProp)) && (ok || !reflect.DeepEqual(v, certValidityInDaysProp)) {
		obj["certValidityInDays"] = certValidityInDaysProp
	}

	return obj, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertAlias(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectAlternativeDnsNames(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSubjectAlternativeName, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectAlternativeDnsNamesSubjectAlternativeName(original["subject_alternative_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubjectAlternativeName); val.IsValid() && !isEmptyValue(val) {
		transformed["subjectAlternativeName"] = transformedSubjectAlternativeName
	}

	return transformed, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectAlternativeDnsNamesSubjectAlternativeName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertKeySize(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSigAlg(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubject(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCountryCode, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectCountryCode(original["country_code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCountryCode); val.IsValid() && !isEmptyValue(val) {
		transformed["countryCode"] = transformedCountryCode
	}

	transformedState, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectState(original["state"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedState); val.IsValid() && !isEmptyValue(val) {
		transformed["state"] = transformedState
	}

	transformedLocality, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectLocality(original["locality"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocality); val.IsValid() && !isEmptyValue(val) {
		transformed["locality"] = transformedLocality
	}

	transformedOrg, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectOrg(original["org"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrg); val.IsValid() && !isEmptyValue(val) {
		transformed["org"] = transformedOrg
	}

	transformedOrgUnit, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectOrgUnit(original["org_unit"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOrgUnit); val.IsValid() && !isEmptyValue(val) {
		transformed["orgUnit"] = transformedOrgUnit
	}

	transformedCommonName, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectCommonName(original["common_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommonName); val.IsValid() && !isEmptyValue(val) {
		transformed["commonName"] = transformedCommonName
	}

	transformedEmail, err := expandApigeeEnvKeystoreAliasSelfSignedCertSubjectEmail(original["email"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEmail); val.IsValid() && !isEmptyValue(val) {
		transformed["email"] = transformedEmail
	}

	return transformed, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectCountryCode(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectState(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectLocality(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectOrg(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectOrgUnit(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectCommonName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertSubjectEmail(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandApigeeEnvKeystoreAliasSelfSignedCertCertValidityInDays(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
