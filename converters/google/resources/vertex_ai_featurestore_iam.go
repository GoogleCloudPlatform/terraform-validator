// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "fmt"

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const VertexAIFeaturestoreIAMAssetType string = "{{region}}-aiplatform.googleapis.com/Featurestore"

func resourceConverterVertexAIFeaturestoreIamPolicy() ResourceConverter {
	return ResourceConverter{
		AssetType:         VertexAIFeaturestoreIAMAssetType,
		Convert:           GetVertexAIFeaturestoreIamPolicyCaiObject,
		MergeCreateUpdate: MergeVertexAIFeaturestoreIamPolicy,
	}
}

func resourceConverterVertexAIFeaturestoreIamBinding() ResourceConverter {
	return ResourceConverter{
		AssetType:         VertexAIFeaturestoreIAMAssetType,
		Convert:           GetVertexAIFeaturestoreIamBindingCaiObject,
		FetchFullResource: FetchVertexAIFeaturestoreIamPolicy,
		MergeCreateUpdate: MergeVertexAIFeaturestoreIamBinding,
		MergeDelete:       MergeVertexAIFeaturestoreIamBindingDelete,
	}
}

func resourceConverterVertexAIFeaturestoreIamMember() ResourceConverter {
	return ResourceConverter{
		AssetType:         VertexAIFeaturestoreIAMAssetType,
		Convert:           GetVertexAIFeaturestoreIamMemberCaiObject,
		FetchFullResource: FetchVertexAIFeaturestoreIamPolicy,
		MergeCreateUpdate: MergeVertexAIFeaturestoreIamMember,
		MergeDelete:       MergeVertexAIFeaturestoreIamMemberDelete,
	}
}

func GetVertexAIFeaturestoreIamPolicyCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newVertexAIFeaturestoreIamAsset(d, config, expandIamPolicyBindings)
}

func GetVertexAIFeaturestoreIamBindingCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newVertexAIFeaturestoreIamAsset(d, config, expandIamRoleBindings)
}

func GetVertexAIFeaturestoreIamMemberCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newVertexAIFeaturestoreIamAsset(d, config, expandIamMemberBindings)
}

func MergeVertexAIFeaturestoreIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeVertexAIFeaturestoreIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeVertexAIFeaturestoreIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeVertexAIFeaturestoreIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeVertexAIFeaturestoreIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newVertexAIFeaturestoreIamAsset(
	d TerraformResourceData,
	config *Config,
	expandBindings func(d TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//{{region}}-aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: VertexAIFeaturestoreIAMAssetType,
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchVertexAIFeaturestoreIamPolicy(d TerraformResourceData, config *Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("region"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}
	if _, ok := d.GetOk("featurestore"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		VertexAIFeaturestoreIamUpdaterProducer,
		d,
		config,
		"//{{region}}-aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}",
		VertexAIFeaturestoreIAMAssetType,
	)
}
