// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "fmt"

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const BinaryAuthorizationAttestorIAMAssetType string = "binaryauthorization.googleapis.com/Attestor"

func resourceConverterBinaryAuthorizationAttestorIamPolicy() ResourceConverter {
	return ResourceConverter{
		AssetType:         BinaryAuthorizationAttestorIAMAssetType,
		Convert:           GetBinaryAuthorizationAttestorIamPolicyCaiObject,
		MergeCreateUpdate: MergeBinaryAuthorizationAttestorIamPolicy,
	}
}

func resourceConverterBinaryAuthorizationAttestorIamBinding() ResourceConverter {
	return ResourceConverter{
		AssetType:         BinaryAuthorizationAttestorIAMAssetType,
		Convert:           GetBinaryAuthorizationAttestorIamBindingCaiObject,
		FetchFullResource: FetchBinaryAuthorizationAttestorIamPolicy,
		MergeCreateUpdate: MergeBinaryAuthorizationAttestorIamBinding,
		MergeDelete:       MergeBinaryAuthorizationAttestorIamBindingDelete,
	}
}

func resourceConverterBinaryAuthorizationAttestorIamMember() ResourceConverter {
	return ResourceConverter{
		AssetType:         BinaryAuthorizationAttestorIAMAssetType,
		Convert:           GetBinaryAuthorizationAttestorIamMemberCaiObject,
		FetchFullResource: FetchBinaryAuthorizationAttestorIamPolicy,
		MergeCreateUpdate: MergeBinaryAuthorizationAttestorIamMember,
		MergeDelete:       MergeBinaryAuthorizationAttestorIamMemberDelete,
	}
}

func GetBinaryAuthorizationAttestorIamPolicyCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBinaryAuthorizationAttestorIamAsset(d, config, expandIamPolicyBindings)
}

func GetBinaryAuthorizationAttestorIamBindingCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBinaryAuthorizationAttestorIamAsset(d, config, expandIamRoleBindings)
}

func GetBinaryAuthorizationAttestorIamMemberCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newBinaryAuthorizationAttestorIamAsset(d, config, expandIamMemberBindings)
}

func MergeBinaryAuthorizationAttestorIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeBinaryAuthorizationAttestorIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeBinaryAuthorizationAttestorIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeBinaryAuthorizationAttestorIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeBinaryAuthorizationAttestorIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newBinaryAuthorizationAttestorIamAsset(
	d TerraformResourceData,
	config *Config,
	expandBindings func(d TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//binaryauthorization.googleapis.com/{{attestor}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: BinaryAuthorizationAttestorIAMAssetType,
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchBinaryAuthorizationAttestorIamPolicy(d TerraformResourceData, config *Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("{{attestor}}"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		BinaryAuthorizationAttestorIamUpdaterProducer,
		d,
		config,
		"//binaryauthorization.googleapis.com/{{attestor}}",
		BinaryAuthorizationAttestorIAMAssetType,
	)
}
