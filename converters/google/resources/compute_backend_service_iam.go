// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "fmt"

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const ComputeBackendServiceIAMAssetType string = "compute.googleapis.com/BackendService"

func resourceConverterComputeBackendServiceIamPolicy() ResourceConverter {
	return ResourceConverter{
		AssetType:         ComputeBackendServiceIAMAssetType,
		Convert:           GetComputeBackendServiceIamPolicyCaiObject,
		MergeCreateUpdate: MergeComputeBackendServiceIamPolicy,
	}
}

func resourceConverterComputeBackendServiceIamBinding() ResourceConverter {
	return ResourceConverter{
		AssetType:         ComputeBackendServiceIAMAssetType,
		Convert:           GetComputeBackendServiceIamBindingCaiObject,
		FetchFullResource: FetchComputeBackendServiceIamPolicy,
		MergeCreateUpdate: MergeComputeBackendServiceIamBinding,
		MergeDelete:       MergeComputeBackendServiceIamBindingDelete,
	}
}

func resourceConverterComputeBackendServiceIamMember() ResourceConverter {
	return ResourceConverter{
		AssetType:         ComputeBackendServiceIAMAssetType,
		Convert:           GetComputeBackendServiceIamMemberCaiObject,
		FetchFullResource: FetchComputeBackendServiceIamPolicy,
		MergeCreateUpdate: MergeComputeBackendServiceIamMember,
		MergeDelete:       MergeComputeBackendServiceIamMemberDelete,
	}
}

func GetComputeBackendServiceIamPolicyCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newComputeBackendServiceIamAsset(d, config, expandIamPolicyBindings)
}

func GetComputeBackendServiceIamBindingCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newComputeBackendServiceIamAsset(d, config, expandIamRoleBindings)
}

func GetComputeBackendServiceIamMemberCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	return newComputeBackendServiceIamAsset(d, config, expandIamMemberBindings)
}

func MergeComputeBackendServiceIamPolicy(existing, incoming Asset) Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func MergeComputeBackendServiceIamBinding(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAuthoritativeBindings)
}

func MergeComputeBackendServiceIamBindingDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAuthoritativeBindings)
}

func MergeComputeBackendServiceIamMember(existing, incoming Asset) Asset {
	return mergeIamAssets(existing, incoming, mergeAdditiveBindings)
}

func MergeComputeBackendServiceIamMemberDelete(existing, incoming Asset) Asset {
	return mergeDeleteIamAssets(existing, incoming, mergeDeleteAdditiveBindings)
}

func newComputeBackendServiceIamAsset(
	d TerraformResourceData,
	config *Config,
	expandBindings func(d TerraformResourceData) ([]IAMBinding, error),
) ([]Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := assetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/backendServices/{{name}}")
	if err != nil {
		return []Asset{}, err
	}

	return []Asset{{
		Name: name,
		Type: ComputeBackendServiceIAMAssetType,
		IAMPolicy: &IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func FetchComputeBackendServiceIamPolicy(d TerraformResourceData, config *Config) (Asset, error) {
	// Check if the identity field returns a value
	if _, ok := d.GetOk("name"); !ok {
		return Asset{}, ErrEmptyIdentityField
	}

	return fetchIamPolicy(
		ComputeBackendServiceIamUpdaterProducer,
		d,
		config,
		"//compute.googleapis.com/projects/{{project}}/global/backendServices/{{name}}",
		ComputeBackendServiceIAMAssetType,
	)
}
